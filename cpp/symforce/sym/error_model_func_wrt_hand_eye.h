// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     function/FUNCTION.h.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once

#include <Eigen/Dense>

#include <sym/rot3.h>

namespace sym {

/**
 * This function was autogenerated from a symbolic function. Do not modify by hand.
 *
 * Symbolic function: error_model_func_wrt_hand_eye
 *
 * Args:
 *     theta11: Scalar
 *     theta12: Scalar
 *     theta21: Scalar
 *     theta22: Scalar
 *     alpha: Scalar
 *     beta: Scalar
 *     RotGT1: Rot3
 *     RotGT2: Rot3
 *     RotHandEye: Rot3
 *     epsilon: Scalar
 *
 * Outputs:
 *     res: Matrix33
 */
template <typename Scalar>
Eigen::Matrix<Scalar, 3, 3> ErrorModelFuncWrtHandEye(
    const Scalar theta11, const Scalar theta12, const Scalar theta21, const Scalar theta22,
    const Scalar alpha, const Scalar beta, const sym::Rot3<Scalar>& RotGT1,
    const sym::Rot3<Scalar>& RotGT2, const sym::Rot3<Scalar>& RotHandEye, const Scalar epsilon) {
  // Total ops: 783

  // Input arrays
  const Eigen::Matrix<Scalar, 4, 1>& _RotGT1 = RotGT1.Data();
  const Eigen::Matrix<Scalar, 4, 1>& _RotGT2 = RotGT2.Data();
  const Eigen::Matrix<Scalar, 4, 1>& _RotHandEye = RotHandEye.Data();

  // Intermediate terms (255)
  const Scalar _tmp0 = -_RotGT1[0] * _RotGT2[3] - _RotGT1[1] * _RotGT2[2] +
                       _RotGT1[2] * _RotGT2[1] + _RotGT1[3] * _RotGT2[0];
  const Scalar _tmp1 = _RotHandEye[1] * _tmp0;
  const Scalar _tmp2 = (Scalar(1) / Scalar(2)) * _tmp1;
  const Scalar _tmp3 = _RotGT1[0] * _RotGT2[2] - _RotGT1[1] * _RotGT2[3] - _RotGT1[2] * _RotGT2[0] +
                       _RotGT1[3] * _RotGT2[1];
  const Scalar _tmp4 = _RotHandEye[0] * _tmp3;
  const Scalar _tmp5 = (Scalar(1) / Scalar(2)) * _tmp4;
  const Scalar _tmp6 = -_RotGT1[0] * _RotGT2[1] + _RotGT1[1] * _RotGT2[0] -
                       _RotGT1[2] * _RotGT2[3] + _RotGT1[3] * _RotGT2[2];
  const Scalar _tmp7 = _RotHandEye[3] * _tmp6;
  const Scalar _tmp8 = (Scalar(1) / Scalar(2)) * _tmp7;
  const Scalar _tmp9 = _RotGT1[0] * _RotGT2[0] + _RotGT1[1] * _RotGT2[1] + _RotGT1[2] * _RotGT2[2] +
                       _RotGT1[3] * _RotGT2[3];
  const Scalar _tmp10 = _RotHandEye[2] * _tmp9;
  const Scalar _tmp11 = (Scalar(1) / Scalar(2)) * _tmp10;
  const Scalar _tmp12 = -_tmp11 + _tmp2 - _tmp5 + _tmp8;
  const Scalar _tmp13 = _RotHandEye[0] * _tmp12;
  const Scalar _tmp14 = _RotHandEye[0] * _tmp0;
  const Scalar _tmp15 = _RotHandEye[1] * _tmp3;
  const Scalar _tmp16 = _RotHandEye[2] * _tmp6;
  const Scalar _tmp17 = _RotHandEye[3] * _tmp9;
  const Scalar _tmp18 = -Scalar(1) / Scalar(2) * _tmp14 - Scalar(1) / Scalar(2) * _tmp15 -
                        Scalar(1) / Scalar(2) * _tmp16 - Scalar(1) / Scalar(2) * _tmp17;
  const Scalar _tmp19 = _RotHandEye[1] * _tmp18;
  const Scalar _tmp20 = _RotHandEye[3] * _tmp0;
  const Scalar _tmp21 = (Scalar(1) / Scalar(2)) * _tmp20;
  const Scalar _tmp22 = _RotHandEye[2] * _tmp3;
  const Scalar _tmp23 = (Scalar(1) / Scalar(2)) * _tmp22;
  const Scalar _tmp24 = _RotHandEye[1] * _tmp6;
  const Scalar _tmp25 = (Scalar(1) / Scalar(2)) * _tmp24;
  const Scalar _tmp26 = _RotHandEye[0] * _tmp9;
  const Scalar _tmp27 = (Scalar(1) / Scalar(2)) * _tmp26;
  const Scalar _tmp28 = _tmp21 + _tmp23 - _tmp25 - _tmp27;
  const Scalar _tmp29 = _RotHandEye[2] * _tmp28;
  const Scalar _tmp30 = _RotHandEye[2] * _tmp0;
  const Scalar _tmp31 = (Scalar(1) / Scalar(2)) * _tmp30;
  const Scalar _tmp32 = _RotHandEye[3] * _tmp3;
  const Scalar _tmp33 = (Scalar(1) / Scalar(2)) * _tmp32;
  const Scalar _tmp34 = _RotHandEye[0] * _tmp6;
  const Scalar _tmp35 = (Scalar(1) / Scalar(2)) * _tmp34;
  const Scalar _tmp36 = _RotHandEye[1] * _tmp9;
  const Scalar _tmp37 = (Scalar(1) / Scalar(2)) * _tmp36;
  const Scalar _tmp38 = _tmp31 - _tmp33 - _tmp35 + _tmp37;
  const Scalar _tmp39 = _tmp14 + _tmp15 + _tmp16 + _tmp17;
  const Scalar _tmp40 = _RotHandEye[1] * _tmp39;
  const Scalar _tmp41 = (Scalar(1) / Scalar(2)) * _tmp40;
  const Scalar _tmp42 = _tmp1 - _tmp10 - _tmp4 + _tmp7;
  const Scalar _tmp43 = _RotHandEye[0] * _tmp42;
  const Scalar _tmp44 = (Scalar(1) / Scalar(2)) * _tmp43;
  const Scalar _tmp45 = _tmp20 + _tmp22 - _tmp24 - _tmp26;
  const Scalar _tmp46 = _RotHandEye[2] * _tmp45;
  const Scalar _tmp47 = (Scalar(1) / Scalar(2)) * _tmp46;
  const Scalar _tmp48 = -_tmp30 + _tmp32 + _tmp34 - _tmp36;
  const Scalar _tmp49 = _RotHandEye[3] * _tmp48;
  const Scalar _tmp50 = (Scalar(1) / Scalar(2)) * _tmp49;
  const Scalar _tmp51 = -_tmp41 - _tmp44 + _tmp47 - _tmp50;
  const Scalar _tmp52 = _RotHandEye[3] * _tmp38 - _tmp13 + _tmp19 + _tmp29 + _tmp51;
  const Scalar _tmp53 = std::sin(beta);
  const Scalar _tmp54 = Scalar(1.0) / (_tmp53);
  const Scalar _tmp55 = std::cos(alpha);
  const Scalar _tmp56 = Scalar(1.0) / (_tmp55 + std::cos(beta));
  const Scalar _tmp57 = std::pow(_tmp53, Scalar(2));
  const Scalar _tmp58 = (Scalar(1) / Scalar(2)) * theta21 - Scalar(1) / Scalar(2) * theta22;
  const Scalar _tmp59 = std::sin(alpha);
  const Scalar _tmp60 = std::pow(_tmp59, Scalar(2));
  const Scalar _tmp61 =
      2 * std::atan(_tmp56 * (_tmp59 * std::cos(_tmp58) +
                              std::sqrt(Scalar(_tmp57 - _tmp60 * std::pow(Scalar(std::sin(_tmp58)),
                                                                          Scalar(2))))));
  const Scalar _tmp62 = std::sin(_tmp61);
  const Scalar _tmp63 = (Scalar(1) / Scalar(2)) * theta21 + (Scalar(1) / Scalar(2)) * theta22;
  const Scalar _tmp64 = std::cos(_tmp63);
  const Scalar _tmp65 = _tmp59 * std::sin(theta21);
  const Scalar _tmp66 = std::sin(_tmp63);
  const Scalar _tmp67 = _tmp59 * std::cos(theta21);
  const Scalar _tmp68 = -_tmp62 * _tmp64 * _tmp65 + _tmp62 * _tmp66 * _tmp67;
  const Scalar _tmp69 = std::cos(_tmp61);
  const Scalar _tmp70 = _tmp55 * _tmp62;
  const Scalar _tmp71 = _tmp65 * _tmp69 - _tmp66 * _tmp70;
  const Scalar _tmp72 = _tmp54 * (-_tmp55 * _tmp71 + _tmp67 * _tmp68);
  const Scalar _tmp73 = _tmp54 * _tmp71;
  const Scalar _tmp74 = -_tmp72 + _tmp73;
  const Scalar _tmp75 = _tmp64 * _tmp70 - _tmp67 * _tmp69;
  const Scalar _tmp76 = _tmp54 * (_tmp55 * _tmp75 - _tmp65 * _tmp68);
  const Scalar _tmp77 = -_tmp76;
  const Scalar _tmp78 = _tmp54 * _tmp75;
  const Scalar _tmp79 = 1 - _tmp78;
  const Scalar _tmp80 = _tmp76 + _tmp78;
  const Scalar _tmp81 = _tmp55 + _tmp80;
  const Scalar _tmp82 =
      -std::max<Scalar>(_tmp55, std::max<Scalar>(_tmp76, std::max<Scalar>(_tmp78, _tmp81)));
  const Scalar _tmp83 = _tmp55 + _tmp82;
  const Scalar _tmp84 =
      1 - std::max<Scalar>(0, -(((_tmp76 + _tmp82) > 0) - ((_tmp76 + _tmp82) < 0)));
  const Scalar _tmp85 = std::min<Scalar>(
      1 - std::max<Scalar>(0, _tmp84),
      1 - std::max<Scalar>(0, -(((_tmp78 + _tmp82) > 0) - ((_tmp78 + _tmp82) < 0))));
  const Scalar _tmp86 =
      std::min<Scalar>(1 - std::max<Scalar>(0, std::max<Scalar>(_tmp84, _tmp85)),
                       1 - std::max<Scalar>(0, -(((_tmp83) > 0) - ((_tmp83) < 0))));
  const Scalar _tmp87 =
      -_tmp86 + std::sqrt(Scalar(std::max<Scalar>(0, _tmp55 + _tmp77 + _tmp79))) + 1;
  const Scalar _tmp88 = (Scalar(1) / Scalar(2)) * _tmp86;
  const Scalar _tmp89 = _tmp88 / _tmp87;
  const Scalar _tmp90 = std::min<Scalar>(
      1 - std::max<Scalar>(0, std::max<Scalar>(_tmp84, std::max<Scalar>(_tmp85, _tmp86))),
      1 - std::max<Scalar>(0, -(((_tmp80 + _tmp83) > 0) - ((_tmp80 + _tmp83) < 0))));
  const Scalar _tmp91 = -_tmp90 + std::sqrt(Scalar(std::max<Scalar>(0, _tmp81 + 1))) + 1;
  const Scalar _tmp92 = (Scalar(1) / Scalar(2)) * _tmp90;
  const Scalar _tmp93 = _tmp54 * (_tmp65 * _tmp71 - _tmp67 * _tmp75);
  const Scalar _tmp94 = -_tmp67 + _tmp93;
  const Scalar _tmp95 = -_tmp55;
  const Scalar _tmp96 = _tmp95 + 1;
  const Scalar _tmp97 =
      -_tmp85 + std::sqrt(Scalar(std::max<Scalar>(0, _tmp77 + _tmp78 + _tmp96))) + 1;
  const Scalar _tmp98 = (Scalar(1) / Scalar(2)) * _tmp85;
  const Scalar _tmp99 = _tmp98 / _tmp97;
  const Scalar _tmp100 = _tmp54 * _tmp68;
  const Scalar _tmp101 = -_tmp100 + _tmp65;
  const Scalar _tmp102 =
      -_tmp84 + std::sqrt(Scalar(std::max<Scalar>(0, _tmp76 + _tmp79 + _tmp95))) + 1;
  const Scalar _tmp103 = (Scalar(1) / Scalar(2)) * _tmp84;
  const Scalar _tmp104 = _tmp103 / _tmp102;
  const Scalar _tmp105 = _tmp101 * _tmp104 + _tmp74 * _tmp89 + _tmp91 * _tmp92 + _tmp94 * _tmp99;
  const Scalar _tmp106 = (Scalar(1) / Scalar(2)) * theta11 + (Scalar(1) / Scalar(2)) * theta12;
  const Scalar _tmp107 = std::cos(_tmp106);
  const Scalar _tmp108 = (Scalar(1) / Scalar(2)) * theta11 - Scalar(1) / Scalar(2) * theta12;
  const Scalar _tmp109 =
      2 * std::atan(_tmp56 * (_tmp59 * std::cos(_tmp108) +
                              std::sqrt(Scalar(_tmp57 - _tmp60 * std::pow(Scalar(std::sin(_tmp108)),
                                                                          Scalar(2))))));
  const Scalar _tmp110 = std::sin(_tmp109);
  const Scalar _tmp111 = _tmp110 * _tmp55;
  const Scalar _tmp112 = std::cos(_tmp109);
  const Scalar _tmp113 = _tmp59 * std::cos(theta11);
  const Scalar _tmp114 = _tmp107 * _tmp111 - _tmp112 * _tmp113;
  const Scalar _tmp115 = std::sin(_tmp106);
  const Scalar _tmp116 = _tmp59 * std::sin(theta11);
  const Scalar _tmp117 = -_tmp111 * _tmp115 + _tmp112 * _tmp116;
  const Scalar _tmp118 = _tmp54 * (-_tmp113 * _tmp114 + _tmp116 * _tmp117);
  const Scalar _tmp119 = -_tmp113 + _tmp118;
  const Scalar _tmp120 = _tmp114 * _tmp54;
  const Scalar _tmp121 = -_tmp107 * _tmp110 * _tmp116 + _tmp110 * _tmp113 * _tmp115;
  const Scalar _tmp122 = _tmp54 * (_tmp114 * _tmp55 - _tmp116 * _tmp121);
  const Scalar _tmp123 = _tmp122 + _tmp55;
  const Scalar _tmp124 = _tmp120 + _tmp123;
  const Scalar _tmp125 =
      -std::max<Scalar>(_tmp120, std::max<Scalar>(_tmp122, std::max<Scalar>(_tmp124, _tmp55)));
  const Scalar _tmp126 = _tmp120 + _tmp125;
  const Scalar _tmp127 =
      1 - std::max<Scalar>(0, -(((_tmp122 + _tmp125) > 0) - ((_tmp122 + _tmp125) < 0)));
  const Scalar _tmp128 =
      std::min<Scalar>(1 - std::max<Scalar>(0, _tmp127),
                       1 - std::max<Scalar>(0, -(((_tmp126) > 0) - ((_tmp126) < 0))));
  const Scalar _tmp129 = std::min<Scalar>(
      1 - std::max<Scalar>(0, std::max<Scalar>(_tmp127, _tmp128)),
      1 - std::max<Scalar>(0, -(((_tmp125 + _tmp55) > 0) - ((_tmp125 + _tmp55) < 0))));
  const Scalar _tmp130 = std::min<Scalar>(
      1 - std::max<Scalar>(0, std::max<Scalar>(_tmp127, std::max<Scalar>(_tmp128, _tmp129))),
      1 - std::max<Scalar>(0, -(((_tmp123 + _tmp126) > 0) - ((_tmp123 + _tmp126) < 0))));
  const Scalar _tmp131 = -_tmp130 + std::sqrt(Scalar(std::max<Scalar>(0, _tmp124 + 1))) + 1;
  const Scalar _tmp132 = (Scalar(1) / Scalar(2)) * _tmp130;
  const Scalar _tmp133 = _tmp132 / _tmp131;
  const Scalar _tmp134 = _tmp117 * _tmp54;
  const Scalar _tmp135 = _tmp54 * (_tmp113 * _tmp121 - _tmp117 * _tmp55);
  const Scalar _tmp136 = _tmp134 + _tmp135;
  const Scalar _tmp137 = -_tmp120;
  const Scalar _tmp138 =
      -_tmp127 + std::sqrt(Scalar(std::max<Scalar>(0, _tmp122 + _tmp137 + _tmp96))) + 1;
  const Scalar _tmp139 = (Scalar(1) / Scalar(2)) * _tmp127;
  const Scalar _tmp140 = _tmp139 / _tmp138;
  const Scalar _tmp141 = -_tmp122;
  const Scalar _tmp142 =
      -_tmp128 + std::sqrt(Scalar(std::max<Scalar>(0, _tmp120 + _tmp141 + _tmp96))) + 1;
  const Scalar _tmp143 = (Scalar(1) / Scalar(2)) * _tmp128;
  const Scalar _tmp144 = _tmp121 * _tmp54;
  const Scalar _tmp145 = _tmp116 + _tmp144;
  const Scalar _tmp146 =
      -_tmp129 + std::sqrt(Scalar(std::max<Scalar>(0, _tmp137 + _tmp141 + _tmp55 + 1))) + 1;
  const Scalar _tmp147 = (Scalar(1) / Scalar(2)) * _tmp129;
  const Scalar _tmp148 = _tmp147 / _tmp146;
  const Scalar _tmp149 =
      _tmp119 * _tmp133 + _tmp136 * _tmp140 + _tmp142 * _tmp143 + _tmp145 * _tmp148;
  const Scalar _tmp150 = _tmp72 + _tmp73;
  const Scalar _tmp151 = _tmp100 + _tmp65;
  const Scalar _tmp152 = _tmp92 / _tmp91;
  const Scalar _tmp153 = _tmp104 * _tmp150 + _tmp151 * _tmp89 + _tmp152 * _tmp94 + _tmp97 * _tmp98;
  const Scalar _tmp154 = _tmp134 - _tmp135;
  const Scalar _tmp155 = _tmp143 / _tmp142;
  const Scalar _tmp156 = _tmp116 - _tmp144;
  const Scalar _tmp157 =
      _tmp119 * _tmp155 + _tmp131 * _tmp132 + _tmp140 * _tmp156 + _tmp148 * _tmp154;
  const Scalar _tmp158 = _tmp113 + _tmp118;
  const Scalar _tmp159 =
      _tmp133 * _tmp154 + _tmp140 * _tmp158 + _tmp145 * _tmp155 + _tmp146 * _tmp147;
  const Scalar _tmp160 = _tmp67 + _tmp93;
  const Scalar _tmp161 =
      _tmp101 * _tmp152 + _tmp102 * _tmp103 + _tmp150 * _tmp99 + _tmp160 * _tmp89;
  const Scalar _tmp162 =
      _tmp133 * _tmp156 + _tmp136 * _tmp155 + _tmp138 * _tmp139 + _tmp148 * _tmp158;
  const Scalar _tmp163 = _tmp104 * _tmp160 + _tmp151 * _tmp99 + _tmp152 * _tmp74 + _tmp87 * _tmp88;
  const Scalar _tmp164 =
      -_tmp105 * _tmp149 + _tmp153 * _tmp157 - _tmp159 * _tmp161 + _tmp162 * _tmp163;
  const Scalar _tmp165 = _RotHandEye[3] * _tmp39;
  const Scalar _tmp166 = (Scalar(1) / Scalar(2)) * _tmp165;
  const Scalar _tmp167 = _RotHandEye[2] * _tmp12;
  const Scalar _tmp168 = _RotHandEye[3] * _tmp18;
  const Scalar _tmp169 = _RotHandEye[0] * _tmp28;
  const Scalar _tmp170 = _RotHandEye[2] * _tmp42;
  const Scalar _tmp171 = -Scalar(1) / Scalar(2) * _tmp170;
  const Scalar _tmp172 = _RotHandEye[0] * _tmp45;
  const Scalar _tmp173 = -Scalar(1) / Scalar(2) * _tmp172;
  const Scalar _tmp174 = _RotHandEye[1] * _tmp48;
  const Scalar _tmp175 = -Scalar(1) / Scalar(2) * _tmp174;
  const Scalar _tmp176 = -_RotHandEye[1] * _tmp38 + _tmp166 + _tmp167 + _tmp168 + _tmp169 +
                         _tmp171 + _tmp173 + _tmp175;
  const Scalar _tmp177 =
      _tmp105 * _tmp157 + _tmp149 * _tmp153 + _tmp159 * _tmp163 + _tmp161 * _tmp162;
  const Scalar _tmp178 = _RotHandEye[1] * _tmp12;
  const Scalar _tmp179 = _RotHandEye[0] * _tmp18;
  const Scalar _tmp180 = _RotHandEye[3] * _tmp28 - _tmp179;
  const Scalar _tmp181 = _RotHandEye[0] * _tmp39;
  const Scalar _tmp182 = (Scalar(1) / Scalar(2)) * _tmp181;
  const Scalar _tmp183 = _RotHandEye[1] * _tmp42;
  const Scalar _tmp184 = (Scalar(1) / Scalar(2)) * _tmp183;
  const Scalar _tmp185 = _RotHandEye[3] * _tmp45;
  const Scalar _tmp186 = (Scalar(1) / Scalar(2)) * _tmp185;
  const Scalar _tmp187 = _RotHandEye[2] * _tmp48;
  const Scalar _tmp188 = (Scalar(1) / Scalar(2)) * _tmp187;
  const Scalar _tmp189 = -_tmp182 + _tmp184 - _tmp186 - _tmp188;
  const Scalar _tmp190 = -_RotHandEye[2] * _tmp38 - _tmp178 + _tmp180 + _tmp189;
  const Scalar _tmp191 =
      -_tmp105 * _tmp162 - _tmp149 * _tmp163 + _tmp153 * _tmp159 + _tmp157 * _tmp161;
  const Scalar _tmp192 = _RotHandEye[2] * _tmp39;
  const Scalar _tmp193 = (Scalar(1) / Scalar(2)) * _tmp192;
  const Scalar _tmp194 = _RotHandEye[1] * _tmp28;
  const Scalar _tmp195 = _RotHandEye[3] * _tmp42;
  const Scalar _tmp196 = (Scalar(1) / Scalar(2)) * _tmp195;
  const Scalar _tmp197 = _RotHandEye[1] * _tmp45;
  const Scalar _tmp198 = (Scalar(1) / Scalar(2)) * _tmp197;
  const Scalar _tmp199 = _RotHandEye[0] * _tmp48;
  const Scalar _tmp200 = (Scalar(1) / Scalar(2)) * _tmp199;
  const Scalar _tmp201 = _RotHandEye[2] * _tmp18;
  const Scalar _tmp202 = _RotHandEye[3] * _tmp12 - _tmp201;
  const Scalar _tmp203 =
      _RotHandEye[0] * _tmp38 + _tmp193 + _tmp194 + _tmp196 + _tmp198 - _tmp200 + _tmp202;
  const Scalar _tmp204 =
      -_tmp105 * _tmp159 + _tmp149 * _tmp161 - _tmp153 * _tmp162 + _tmp157 * _tmp163;
  const Scalar _tmp205 = _tmp165 - _tmp170 - _tmp172 - _tmp174;
  const Scalar _tmp206 = _tmp177 * _tmp205;
  const Scalar _tmp207 = _tmp40 + _tmp43 - _tmp46 + _tmp49;
  const Scalar _tmp208 = _tmp164 * _tmp207;
  const Scalar _tmp209 = _tmp192 + _tmp195 + _tmp197 - _tmp199;
  const Scalar _tmp210 = _tmp204 * _tmp209;
  const Scalar _tmp211 = _tmp181 - _tmp183 + _tmp185 + _tmp187;
  const Scalar _tmp212 = _tmp191 * _tmp211;
  const Scalar _tmp213 = _tmp206 + _tmp208 + _tmp210 + _tmp212;
  const Scalar _tmp214 = std::fabs(_tmp213);
  const Scalar _tmp215 = 1 - epsilon;
  const Scalar _tmp216 = std::min<Scalar>(_tmp214, _tmp215);
  const Scalar _tmp217 = 1 - std::pow(_tmp216, Scalar(2));
  const Scalar _tmp218 = 2 * std::min<Scalar>(0, (((_tmp206 + _tmp208 + _tmp210 + _tmp212) > 0) -
                                                  ((_tmp206 + _tmp208 + _tmp210 + _tmp212) < 0))) +
                         1;
  const Scalar _tmp219 = _tmp218 * std::acos(_tmp216);
  const Scalar _tmp220 = 2 * _tmp219 / std::sqrt(_tmp217);
  const Scalar _tmp221 =
      _tmp164 * _tmp209 - _tmp177 * _tmp211 + _tmp191 * _tmp205 - _tmp204 * _tmp207;
  const Scalar _tmp222 =
      _tmp164 * _tmp203 + _tmp176 * _tmp191 + _tmp177 * _tmp190 + _tmp204 * _tmp52;
  const Scalar _tmp223 = ((((-_tmp214 + _tmp215) > 0) - ((-_tmp214 + _tmp215) < 0)) + 1) *
                         (((_tmp213) > 0) - ((_tmp213) < 0));
  const Scalar _tmp224 = _tmp216 * _tmp219 / (_tmp217 * std::sqrt(_tmp217));
  const Scalar _tmp225 = _tmp223 * _tmp224;
  const Scalar _tmp226 = _tmp222 * _tmp225;
  const Scalar _tmp227 = _tmp218 / _tmp217;
  const Scalar _tmp228 = _tmp223 * _tmp227;
  const Scalar _tmp229 = _tmp222 * _tmp228;
  const Scalar _tmp230 =
      _tmp164 * _tmp205 - _tmp177 * _tmp207 - _tmp191 * _tmp209 + _tmp204 * _tmp211;
  const Scalar _tmp231 =
      -_tmp164 * _tmp211 - _tmp177 * _tmp209 + _tmp191 * _tmp207 + _tmp204 * _tmp205;
  const Scalar _tmp232 = _tmp11 - _tmp2 + _tmp5 - _tmp8;
  const Scalar _tmp233 = -_tmp31 + _tmp33 + _tmp35 - _tmp37;
  const Scalar _tmp234 = _RotHandEye[1] * _tmp233 + _tmp166 + _tmp168 + _tmp171 + _tmp173 + _tmp175;
  const Scalar _tmp235 = -_RotHandEye[2] * _tmp232 + _tmp169 + _tmp234;
  const Scalar _tmp236 = _RotHandEye[3] * _tmp233 - _tmp19;
  const Scalar _tmp237 = -_RotHandEye[0] * _tmp232 + _tmp236 - _tmp29 + _tmp51;
  const Scalar _tmp238 = _RotHandEye[0] * _tmp233;
  const Scalar _tmp239 = -_tmp193 - _tmp196 - _tmp198 + _tmp200;
  const Scalar _tmp240 = _RotHandEye[3] * _tmp232 - _tmp194 + _tmp201 + _tmp238 + _tmp239;
  const Scalar _tmp241 = _RotHandEye[2] * _tmp233;
  const Scalar _tmp242 =
      _RotHandEye[1] * _tmp232 + _tmp180 + _tmp182 - _tmp184 + _tmp186 + _tmp188 + _tmp241;
  const Scalar _tmp243 =
      _tmp223 * (_tmp164 * _tmp235 + _tmp177 * _tmp237 + _tmp191 * _tmp240 + _tmp204 * _tmp242);
  const Scalar _tmp244 = _tmp221 * _tmp243;
  const Scalar _tmp245 = _tmp227 * _tmp243;
  const Scalar _tmp246 = _tmp224 * _tmp243;
  const Scalar _tmp247 = -_tmp21 - _tmp23 + _tmp25 + _tmp27;
  const Scalar _tmp248 = _RotHandEye[3] * _tmp247 + _tmp178 + _tmp179 + _tmp189 - _tmp241;
  const Scalar _tmp249 = -_RotHandEye[1] * _tmp247 + _tmp202 - _tmp238 + _tmp239;
  const Scalar _tmp250 =
      _RotHandEye[2] * _tmp247 + _tmp13 + _tmp236 + _tmp41 + _tmp44 - _tmp47 + _tmp50;
  const Scalar _tmp251 = -_RotHandEye[0] * _tmp247 + _tmp167 + _tmp234;
  const Scalar _tmp252 =
      _tmp164 * _tmp248 + _tmp177 * _tmp249 + _tmp191 * _tmp250 + _tmp204 * _tmp251;
  const Scalar _tmp253 = _tmp225 * _tmp252;
  const Scalar _tmp254 = _tmp228 * _tmp252;

  // Output terms (1)
  Eigen::Matrix<Scalar, 3, 3> _res;

  _res(0, 0) =
      _tmp220 * (_tmp164 * _tmp52 - _tmp176 * _tmp177 + _tmp190 * _tmp191 - _tmp203 * _tmp204) +
      _tmp221 * _tmp226 - _tmp221 * _tmp229;
  _res(1, 0) =
      _tmp220 * (_tmp164 * _tmp190 + _tmp176 * _tmp204 - _tmp177 * _tmp203 - _tmp191 * _tmp52) +
      _tmp226 * _tmp230 - _tmp229 * _tmp230;
  _res(2, 0) =
      _tmp220 * (-_tmp164 * _tmp176 - _tmp177 * _tmp52 + _tmp190 * _tmp204 + _tmp191 * _tmp203) +
      _tmp226 * _tmp231 - _tmp229 * _tmp231;
  _res(0, 1) =
      _tmp220 * (_tmp164 * _tmp242 - _tmp177 * _tmp240 + _tmp191 * _tmp237 - _tmp204 * _tmp235) +
      _tmp224 * _tmp244 - _tmp227 * _tmp244;
  _res(1, 1) =
      _tmp220 * (_tmp164 * _tmp237 - _tmp177 * _tmp235 - _tmp191 * _tmp242 + _tmp204 * _tmp240) -
      _tmp230 * _tmp245 + _tmp230 * _tmp246;
  _res(2, 1) =
      _tmp220 * (-_tmp164 * _tmp240 - _tmp177 * _tmp242 + _tmp191 * _tmp235 + _tmp204 * _tmp237) -
      _tmp231 * _tmp245 + _tmp231 * _tmp246;
  _res(0, 2) =
      _tmp220 * (_tmp164 * _tmp251 - _tmp177 * _tmp250 + _tmp191 * _tmp249 - _tmp204 * _tmp248) +
      _tmp221 * _tmp253 - _tmp221 * _tmp254;
  _res(1, 2) =
      _tmp220 * (_tmp164 * _tmp249 - _tmp177 * _tmp248 - _tmp191 * _tmp251 + _tmp204 * _tmp250) +
      _tmp230 * _tmp253 - _tmp230 * _tmp254;
  _res(2, 2) =
      _tmp220 * (-_tmp164 * _tmp250 - _tmp177 * _tmp251 + _tmp191 * _tmp248 + _tmp204 * _tmp249) +
      _tmp231 * _tmp253 - _tmp231 * _tmp254;

  return _res;
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace sym
